一. 抽 象 类 等 基 本 概 念 : 是类的生成器.


总 结 : 抽象类的功能 为如何创建类 <自定义规则>

    <详见practice/abstract_class.py>


    <1>抽象类:

        ! ! ! 和 元类 同级别的 一种类. 用来制作类.
        ! ! ! 类中 只要有一个方法 是抽象类方法,那么这个类就是抽象类.

        抽象类中可以有正常的方法.
    
        不完整的一种类.
        具有抽象方法的类就是抽象类.


    特 征 :

        (1) 抽象类不能实例化.
        (2) 抽象类中可以存在抽象方法,也可以存在正常的方法.
        (3) 抽象类中可以添加成员属性.
        (4) 抽象类的使用方式 <只有被其他类继承>.(不能实例化)
      (5) 其他类继承了抽象类,并且实现了抽象类的所有抽象方法之后就可以实例化该类.


    作 用 :
        
        (1) 指定开发程序规范.

        (2) 协同程序开发,加速开发效率.


    <2> 抽 象 方 法 :

        不完整的方法.
        
        没有方法体的方法就是抽象方法.

    <3> 元 类 :

        一切对象,对象由类/类型创建,类/类型由元类创建.

        元类就是 <用来制作类> 的类.

        正常情况下所有类的默认元类都是type.

            正常情况 type 是系统默认的元类.

            查看属于什么类:

                1.对象.__class__

                2.type(对象)
    
            查看一个类的元类:

                1. 类.__class__

                2. type(类)
        
        注 意 : 1.类就是类型. type(4) 其中4是对象,类型是 int

                type(int)    return <class 'type'>

                2.正常情况 type 是系统默认的元类.



二. 抽 象 类 制 作 : 不由系统默认的type类制作.用 abc(abstract)模块制作.

    <1> import abc

        class 自定义抽象类名(metaclass = abc.ABCMeta)    metaclass : 元类

        (1) 对象 抽象方法 :
            
            @abc.abstractmethod

            def ...(self):

                pass


        (2) 类 抽象方法 :
            
            @abc.abstractclassmethod

            def ...(cls):

                pass


        (3) 绑定类 抽象方法 :

            @abc.abstractmethod

            def ...():

                pass


        (4) 静态类 抽象方法 :

            @abc.abstractstaticmethod

            def ...():

                pass


        #新的类 继承抽象类,直到用普通类方法覆写了所有抽象类方法,这时才可实例化.

        class 实际类名(自定义抽象类名):

            def 方法名(self):

                实现功能的代码块,不能为空.例如:
                
                print('已覆写')

            .

            .

            .


        #实例化 :

        对象 = 实际类名()
