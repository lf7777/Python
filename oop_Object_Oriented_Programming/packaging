一. 封 装 概 念 :


    <1> 对于成员操作进行限制的保护性措施.


    <2> 对象/类成员的访问 :

        1. 当前类/对象内部访问   (在类的结构内部)

        2. 类和对象的外部访问    (在类的结构外部)

        3. 类和对象的子类/子对象的访问(在类的结构外部,在子类/对象的内部)



二. 封 装 分 为 三 个 级 别 : (权限来区分)


    <1> 私有化 封装
        
    <2> 公共的 封装

    <3> 受保护的 封装 (继承相关)



<1> 私 有 化 封 装 : __ (私有 : private)


简 称 : 外部无法直接访问该变量,但可以 在内部通过 self.__变量名使用.

            外部通过调用方法,可以得到该私有化的值.


    函 数 中 使 用 格 式 :

        self.__变量名

    (1) 私有化之后 外部访问 无法直接访问 : 
            
            在变量名(属性或方法的变量名)前 添加 双下划线(__)
        

    (2) 仅可在 内部使用,属性串联函数,函数串联函数等.

    (3) 子类继承父类后,同样无法直接访问变量的值.



<3> 受 保 护 封 装 : (受保护的 : protected)

    python 目前不支持设定受保护的成员,但是开发者由约定使用方式.(系统无支持)

    (1) 格 式 : _

            在变量名前面添加 一个下划线(_)

    (2) 目 的 : 约定_只允许其本身与子类进行访问,不能被 import 之后使用.



<2> 公 共 封 装 : (公共 : public)


    方 法 : 任何成员在没有进行私有化操作的时候默认都是公共的封装.

    特 征 : 公共的封装成员属性和方法,在任何位置都可以被访问.



三. 其 他 : 


    <1>python 私有化 原理 : (仅是 改名策略)

        (1)_类名__变量名 

        注 意 !!!: 知道,但是 不可使用.用来加强 程序管理.

        在添加 __ 后, python实际上给 改成了 _类名__变量名的 命名格式.

            (下划线类名下划线下划线变量名)  

        调 用 示 例 : me._Human__run()
