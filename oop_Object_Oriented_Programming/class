一. 类 的 概 念 :

    类 : 类是 方法 属性的 集合.

            可以是 方法的 动词.

            也可以是 属性的 名词.

            也可以是方法和属性的.
    
         就是给 很多的 方法 属性 归个类.


    类 方 法 暂 时 分 为 两 大 类 :

        (1) 方法中 具有接收对象 的参数(self)这个方法,叫做非绑定类.(不与类绑定)

        (2) 方法中 不具有接收对象 的参数(self)这个方法,叫做绑定类.(与类绑定)

                原 因 : 因 class 类名:不能接收参数,所以内部函数不带参的,
                        
                        就是与 类 绑定的函数.



二. 书 写 规 则 :


<1> 声明一个类必须使用class关键字.

<2> 类名的声明需要符合大驼峰命名法.

<3> 类中只能存在两种内容 : 属性和方法,除此之外不允许出现其他内容.

<4> 声明属性的时候,变量名必须赋值.

<5> 声明方法的时候,按照函数声明规范即可(参数中会自动添加 self 参数)



三. 类 操 作 :


<1> 类名.__dict__

    查看类中的 属性和值 及 方法和地址.


    属 性 :

        <1> 访 问 :

            (1) 类名.属性对象名


        <2> 修 改 :

            (1) 类名.属性对象名 = 新属性值


        <3> 添 加 :

            (1) 类名.新属性对象名 = 属性值


        <4> 删 除 :

            (1) del 类名.属性对象名



    方 法 :

        <1> 访 问 :
        
            (1) 类名.方法名(必须传个参数)

                类 访问必须传个参数.


        <2> 修 改 :

            可以这么做 但违背常理,也没必要.

            (1) 类名.方法名 = 新方法名(或lambda表达式)

            注 意 : def 创建函数 不能直接写在修改的行里,而lambda可以.


        <3> 添 加 :

            可以这么做 但违背常理,也没必要.

            (1) 类名.方法变量名 = 自定义方法名


        <4> 删 除 :

            (1) del 类名.方法名



四. 其 他 :

    <1> print(类名)
    
            return <class '__main__.类名'>

        在python中,定义一个类,就等于定义了一个数据类型.所以数据类型是无限的.


    <2> id(类名)

            return 有值


    <3> type(类名)

            return 'type'


    <4> int,float,list等等 都是 类.这些类 是系统预先定义好的.


    <5> 创建类不能加括号 实例化类 需要 加括号的.
