一. 对 象 概 念 :

    对 象 : 是真真正正存在的事物.

            实例化了 转换为现实了 就是 对象.



二. 实 例 化 对 象 :


    <1> 格 式 :

            对象变量 = 类名()


    <2> id(对象)

            return 有值.


    <3> type(对象)

            return <class '类名'>


    <4> print(对象)

            return <由谁创建 object at 地址>


    <5> 对象的 数据类型,就是 抽象化回来的 类,表示对象的 类型 是 该类.



三. 对 象 操 作 :

    注 意 : 实例化时 带括号与不带括号 的区别 :

            带 : 不会将 类的包给 对象.

            不带 : 会将 类的包 完整给对象.

                所以为节约系统资源,实例化时 要带括号!!!

    
    终端小总结:

                (1) import 类的文件后,在终端环境产生特定的一块儿内容区域.

                (2) c = computer() 是实例化,完全的下游制造商,需要材料管上要.

                (3) c = computer 则是赋值,两个完全一样.以相同的方式, 
                    
                    指向这个 内容区域,如果用 c 变量(此时c不是对象)修改类中的
                    
                    成员属性或方法,那么用远改变 此 环境下的 内容区域.


    <1> 对象.__dict__
        
            return {}

        原 因 : 实例化时 带括号了.

        所以 对象的信息 是个{}



    属 性 :

        <1> 访 问 :

            (1) 对象.属性名


        <2> 修 改 : 

            (1) 对象.属性名 = 新属性

                此时 对象.__dict__得到字典 {属性名:新属性}

                因 : 从程序设置的角度 : 

                        该对象修改自身的值后,在查询属性值的时候,先优先在

                        这个对象的包中查找,如果有则用,没有则向类的包中查找.

        
        <3> 添 加 :

            (1) 对象.属性名 = 属性值
        
        
        <4> 删 除 :

            (1) 不可能删除,除非对象是 没加括号实例化的.

                因为 : 因删除的是 类的包中 的内容.

                       只可以删除 自己包 中的内容. 

    方 法 :

        <1> 访 问 : 

            (1) 对象.方法名()

                对象访问时,会自动传入一个参数.

                所以 不需要参数的时候 不用加参数.


        <2> 修 改 :

            (1) 对象.方法名 = 新方法名(当前行修改可用lambda,其他时要从写个)

            修改之后,会添加到 对象.__dict__中.


        <3> 添 加 :
            
            (1) 对象.新方法名 = 方法名

            添加之后,会添加到 对象.__dict__中.


        <4> 删 除 :

            (1) 不存在删除,因删除的是 类的包中的内容.

                只可以 删除 该对象自己写在 自己包 中的内容.


三. self


self 使 用 条 件 :

    (1) 类的方法 调用类的 属性时.
    
    (2) 实例化对象后,对象修改了属性的值,这时 希望 调用 自己修改过的属性.

    (3) 希望执行一个函数,函数内部还可以调用类的其他函数 : 
        
            在函数内部 加入 self.otherfunction()


原 理 : 在对象使用方法的时候,会自动把自身作为参数传进方法中.

        若 函数没有参数接收,则报错.
    
            对象.方法(自动传入 对象变量)

<1> self 参数 是隐藏的,当传其他参数时, self 参数 默认还是第一个.
