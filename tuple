一. 定 义 :


1. 创建 元祖 :

<1> 变量 = ()

<2> 变量 = tuple()

<3> 变量 = tuple(容器数据)
        具有多个数据 的 元祖

            (1)容器数据 为 元祖 :
            a = tuple((1,2,3,4))
                return (1,2,3,4)
            
            (2)容器数据 为 列表 :
            a = tuple([1,2,3,4])
                return (1,2,3,4)

            (3)容器数据 为 集合 :
            a = tuple({1,2,3,4,'a'})
                return ('a',1,2,3,4)
                    无序元祖

            (4)容器数据 为 字典 :
            同 集合 一样 ,return 无序 的 键 .



2. 定义只有一个元素的 元祖 :

<1> t = (1)
        return 1
  因为括号()既可以表示tuple，又可以表示数学公式中>的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，所以结果是 1.

<2> 正确 定义一个的 写法 :
    t = (1,)
        return (1,)


3. 元祖 概念 : 

    <1> 一组 有序数据 的组合,元祖 元素 不可以修改.

    <2> 元祖 和 列表 一样 ,里面 可以 嵌套 列表,元祖 集合 字典(3.8以测试)


二. 元祖 操作 :

1. 只能进行 访问 :

<1> tuple[1]
        普通 索引

<2> tuple[-4]
        反向 索引

<3> tuple[1:4]
        切片 访问

<4> tuple[1:4:2]
        切片 跳步 访问

2. 常用 函数 :

1.max()

2.min()

3.len()

4.tuple()


三. 元 祖 推 导 式 :

元祖推导式 的结果 不是 元祖 ,而是 生成器.
语法同 列表推导式 相同.

1.元祖推导式 :

<1>语法 : 
    结果变量 = (变量 for 变量 in 容器数据)
<2>元祖推导式 :
    是 在内存中的一个地址上 做出的结果 为一个 生成器.
    只有调用它时,它才会工作.

<3>生成器 :
    数据推导式的结果,数据需要的时候 才制作,不需要的时候,只是等待.体现在内存上时,只是一个内存地址.

<4>遍历 生成器 :
    for i in 生成器变量:

2.列表推导式
    是 在内存中 做出的结果 为直接得到一个 完整 列表.

    迭代器 :
        概 念 :
        <1>列表 迭代器 的一种 :比如 在一个程序中,有10个g的数据,都存储在列表中,而这个列表 是在 程序当中,当程序进入 内存时,数据过于庞大,超过内存的大小,会出现问题.


3.带有判断条件的 元祖推导式 :

<1>result = (i for i in num if i % 2 == 1)

4.多循环的 元祖推导式 ,及带有判断条件的 元祖推导式,和 列表推导式 相同.
    不同于 产生的 结果.


四. 元 祖 函 数 :

<1>index()

<2>count()
