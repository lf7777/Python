一. 声 明 : 


    <1> list()

    <2> list1 = list(参数只有一个,容器类数据)

    <3> list1 = []



普 通 方 式 的 列 表 增 删 改 查 :


二. 访 问 列 表 中 的 值 :

    
    <1> list[1]

    <2> 可以使用 跳步值 查看.
            
        l[1::2]


三. 修 改 列 表 中 的 值 :

    
    <1> list[0] = content :
        
        lilst[index] = content. 

    
    <2> use section index change content :
    
        l[start_index:end_index] = [content]



四. 删 除 列 表 中 的 值 :


    <1> remove single :
    
        del list[single_index]

    <2> use section remove content :

        del list[start_index:end_index]

        or
    
        list[start_index:end_index] = []

    <3> l [::2] = []
    
        error, 不能使用 跳步值.



五. 添 加 列 表 中 的 值 :

    
    <1> 不能通过 索引 添加 值.


    <2> add element by section index
    
        示 例 :

            list1 = ['a','b','c']

            list[start_index:end_index] = element

            list1[1:1] = ['111','222']
            
            return ['a','111','222','b','c']

            注意 : 向 列表 添加 内容 实际上是 迭代 可迭代的 元素 进去. 
            
            添加元素,必须添加 可迭代对象. 如果不写成列表格式,则会将 添加的内容 分开 添进列表.

    <3> l [::2] = []
        
        error,不能使用 跳步值.




六. 列 表 的 其 他 运 算 :

    
    <1> * 

        示 例 :

        list = [1,2] * 2

        list = [1,2,1,2]

    
    <2> +

        示 例 :

        list = [1,2] + [1,2]

        list = [1,2,1,2]

        
    <3> 成 员 检 测 运 算 :

        (1) in 

        (2) not in 



七. 函 数 式 基 本 函 数 :


    <1> max()

        (1) 一个参数 或 一串 内容.

            max()

        (2) max() 给两个有序列表

            按 列表顺序 逐个比较 每两个值.
            
            return 较大 元素的变量 的列表内容.

    <2> min()
        
        和 max() 相同
        
        (1) min(变量)

        (2) 多个变量 同max()

    <3> len()
        

    <4> list()



八. 列 表 操 作 函 数 :


    <1> 添 加 :

        (1) append() 

            add at end

            在列表的末尾一个数据
            
            list.append(element)

        <2> insert()
            
            use index to add element

            在列表的 指定下表索引之前 添加数据
            
            list.insert(索引位置,element)

        
        <3> 多维数组内容的增:
    
            list[1].insert(1,9)


    <2> 删 除 :
    
        (1) pop()
        
            use index to remove element

            在列表中 指定索引位置 删除数据
        
            list.pop(索引位置)

            默认删除最后一个 element

        (2) remove()
            
            元素删除

            在列表中 删除指定的数据
            
            remove(element)

        <3>clear()
            
            清空列表
            
            list.clear()

    
    <3> 修 改 :

        (1) copy()
            
            复制列表
            
            variable = list.copy()

        (2) extend()
            
            合并列表.将两个列表合并为一个.
            
            a.extend(b)

            将 b 的element add to a 的 end

        (3) reverse()
            
            列表反转,修改原列表
            
            a.reverse()

            纯倒过来,不排序

        (4) sort()

            升序,修改原列表

            a.sort(cmp=None,key=None,reverse=False)

            参 数 : reverse = False 默认值是升序, True 为降序

                    cmp 如果指定了该参数会使用该参数的方法进行排序

                    key 主要用来进行比较的元素,只有一个参数就是取自于迭代对象中

                    指定可迭代对象中的一个元素来进行排序.


    <4> 查 看 :

        (1)count()
           
            element次数

            计算列表中 指定数据的 出现次数
            
            a.count(element)

            a.count(1) 1 在a中 出现的次数


        (2) index()
            
            值的索引下标

            返回元素 在列表中第一次出现的索引下标.
            
            a.index(element)

            rindex()

                从右侧开始数,但返回从左侧开始的下标.
            


    <5> 其余方法 参考 str 文件中的 内容进行复习.



九. 列 表 推 导 式 :

        
    <1> 单 循 环 :
        
        new = [i for i in range(1,11) if i % 2 == 1]
        
        最左侧的 语句块 是进入 列表最终的 元素

    <2> 多 循 环 :
        
        (1) colors1 = ['红','黄','绿']
            
            colors2 = ['黑','白','橙']
            
            [i + j for i in colors1 for j in colors2]

        (2) 取下标相同的 颜色,进行组合 :
            
            [i + j for i in colors1 for j in colors2 if colors1.index(i) == colors2.index(j)]


    <3> 对 item 操作:

        [item for item in list if item.strip()]

        返回 strip() 后的 item
