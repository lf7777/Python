闭包:

在一个函数中定义了另一个函数,外部的叫做外函数,内部的叫内函数.

闭包:内函数里运用了外函数的临时变量,并且外函数的返回值是内函数的引用,这样就构成了一个闭包函数.

外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到,就把这个临时变量绑定给了内部函数,然后自己再结束.

闭包变量:外函数绑定给内函数的变量.
因为闭包函数返回值是一个函数,所以还没有调用,需要赋值给一个变量,执行这个变量的时候等>于执行了该函数的内部函数.

1.参数问题:

def outer(x):
    def inner(y):
        return x,y+1
    return inner

a = outer(10)
print(a(1))


outer(10) 传进去的参数是x.
a 里储存的地址指向的是inner函数,所以它的参数是y.

2.nonlocal 关键字:
该关键字意义在 在内函数内部 修改闭包变量.

示例: 忘了就敲一遍

def outer():
    num = 10
    def inner():
        nonlocal num
        num = 100
        print(num,'time1')
    inner()
    print(num,'time2')

outer()

3.内部函数没有值,向上级查找

上方一共三级,总共是四级

local 局部.
nonlocal 闭包空间.
global 全局.
build-in 内建.

示例:

这一级是闭包空间的.
int = 0 
def fun1(): 
    int = 1
    def fun2():
	print(int)
    fun2()
#调用fun1()
fun1()
结果为向上级查找到的 1 .

这一级是全局的.
int = 0
def fun1():
    def fun2():
	print(int)
    fun2()
#调用fun1函数
fun1()
结果为在向上级查找到的 0 .

这一级是build-in的.
def fun1():
    def fun2():
	print(int)
    fun2()
fun1()
#调用fun1函数
结果为再向上一级查找,都没有int的值,便区build-in寻找int的值,即:
<class 'int'>
