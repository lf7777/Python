一. 写 入 文 件 步 骤 : 
    
    <1> 打开文件

    <2> 写入内容

    <3> 关闭文件


<1> 打 开 文 件 :
    fp = open('文件路径','w',encoding = 'utf-8')
        return 文件 IO 对象,记录着文件的信息
        文件路径 : 默认是 相对路径.


    如 何 操 作 : 第 二 个 参 数 

    (1) 'a'
            创建 并 追加内容. 在最后一个字符后 写入
            以后每次 创建文件IO对象 都是追加.

    (2) 'w'
            创建 并 覆写
            文件的指针 指向 文件的开头.

    (3) 'x'
            只能创建新文件,并写入
    
            无文件,则创建
            文件已存在,则报错

    (4)
        'a+' 'w+' 'x+' 增加模式,让写还具有读的功能

        注 意 : 写入后,文件指针 始终在末尾
            1.读取 需要 将光标前移
                变量.seek(字符的起始位置)
            2.读完一次后,光标再次来到末尾

            !!! 再读再写,需重新指定起始位置.


<2> 写 入 内 容 :
    fw.write('我用python')

    (1)写入格式 必须为 字符串类型
    (2)写入变量:
        fw.write(str(变量))


<3> 关 闭 文 件 :  
    
    (1)一定关闭,习惯,不关闭则一直占用系统资源.
    (2)交互模式 需要关闭文件 才完成写入.



二. 读 取 文 件 操 作 :
    
    <1> 打开文件 

    <2> 读取文件内容

    <3> 关闭文件


<1> 打 开 文 件 :
    fr = open('文件路径','r',encoding ='utf-8')
        return 文件 IO 对象,记录着文件的信息
        文件路径 : 默认是 相对路径.


    如 何 操 作 : 第 二 个 参 数 

        (1) 'r'    读取,没有文件则报错
        (2) 'r+'   可读 并可写


<2> 读 取 文 件 内 容 :

    (1)fr.read()    读取文件的所有内容.
        1.读取一次后,想再读,需从 seek()指定起始位置.
        2.变量 = fr.read()
            保存读取到的内容.


<3> 关 闭 文 件 :
    fp.close()



三. 文 件 操 作 相 关 函 数 :


指 针 相 关 函 数 :

    (1)移 动 光 标 字 节 位 置 :
        对象.seek(字节位置)

    (2)获 取 当 前 文 件 指 针 的 字 节 位 置 :
        对象.tell()
            文件指针按照字节计算.
            通常在seek()之后查询位置时使用.

打 开 :

<1> open()

    (1)格式 : open('文件路径','如何操作',encoding='设置字符集')

    (2)如何操作 :

    基础模式 :

        w    w模式
        r    r模式
        x    x模式
        a    a模式

    扩展模式 :

        b    bytes模式 在bytes类型下操作
        +    plus模式

    可 存 在 的 操 作 模 式 :
        w r x a
        w+ r+ x+ a+
        wb rb xb ab
        wb+ rb+ xb+ ab+


读 取 :

<1> read()

    (1) 对象.read()
            读取全部

        默认参数为 读取全部.

    (2) 对象.read(读取的字符个数)
            读取 参数个 字符,参数是整型
    
        指定参数 为指定读取的个数,文件指针同时跳 几个位置.

    (3) return 字符串格式的内容.
            list(return) 得到的是 迭代每个字符 进入 列表.

<2> readline()

    默认参数为 读取一行.

    
    (1) 对象.readline()
            调用一次,读取一行
                return 字符串格式
            再调用,指针跳到下一行 行尾

    (2) 指定参数时 填几个 个数, 文件指针同时跳 几个位置.
            再调用一次后,再跳到新的位置.

<3> readlines()

    (1) 对象.readlines()
            全部内容 作为一个元素 进入一个列表.
    
    (2) 指定参数时 : 
            1.参数不足一行,return 一行作为列表的一个元素,指针跳到行尾.
            再调用,就是下一行的内容,一行作为列表的一个元素,指针跳到行尾. 

            2.参数超过一行,return 多行作为列表的一个元素,指针跳到多行的行尾.



写 入 :

<1> write()
        (1)原样 写入.
        (2)只能以字符串格式传入
        (3)也可以这样 str


<2> writelines()
        (1)可以是字符串格式
        (2)也可以是 容器数据(字符串 列表 元祖 集合),但其中的元素 必须是字符串.
        (3)因 一行作为一个列表元素,要想读的时候是多个 元素,写时要换行.


<3> truncate() 
    翻译 : 截断

    (1) 格式 : 对象.truncate()

    (2) 参数 : 参数为 !!!字节个数.

    (3) 效果 : 会将 原文件 截的 还剩参数个字节.








