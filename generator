一. 概 念 :

    调用才执行的函数就是生成器.


二. 格 式 :

    <1> 函 数 版 生 成 器 : yield

      <详见practice/generator_01.py>

        def func():
            
            代码

            yield

        i = fun()

        next(i)

        注 意 : next()只能作用在生成器对象上.(函数是用来生成 生成器对象的)


    <2> 元 祖 推 导 式 : 生成生成器

        res = (i for i in range(5))

        遍历 自定义次数 个值.

        k = 0

        while k<5:
            
            print(next(res))

            k+=1



三. 其 他 :







































三.判断一个函数是否是是生成器函数 : 
from inspect import isgeneratorfunction

创建方法:

1.列表推导式:
列表生成式改为括号,就变成了迭代器,其产生出来的东西是可迭代对象.

元祖推导式:
g = (x*x for x in range(10))
获取 g 的下一个元素方法为:next(g)

2.将函数变为迭代器:
在一个函数中定义yield关键字,那么它将从一个普通的函数,变为生成器.

可以从collections里import Iterator 来判断是否是生成器.
也可以从collections里import Iterable 来判断是否是可可迭代的对象.

把list,dict,str等Iterable(可迭代的对象)变为迭代器器,用:iter()

3.iter()方法:用这个方法通常只能用来生成列表等生成器,并不能在里面填入函数.将函数变为迭代器的生成器是yield.

4.类迭代器:
