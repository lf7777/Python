相 关 概 念 :


时 间 戳 : 
           1. 从 1970年1月1日0时0分0秒0毫秒 到 指定时间 经过的 秒数.
           2. 时间戳 目前 能够表示到 2028年的某一天.
           3. 太超前 或 太遥远 的时间 会导致时间戳异常.


UTC 时间 : 

           1. 世界协调时间 或 世界统一时间.格林威治的本地时间.
           2. 世界时间 可以根据时区 转换为 本地时间.


夏 令 时 : 

           1. 是一种时间使用策略.在夏天,人为将时钟调快一小时.督促人们早睡早起.
           2. 世界上 有100个左右 的高纬度 国家 在使用,中国不曾经用过一小段时间.

一. 导 包 :

    import time 

    help(time)

    时间的 访问 转换 相关.


二. struct_time() 标准时间类 仅此一个类.


时 间 元 祖 类 : 

    struct_time 类

    时 间 元 祖 : 以元祖的方式 表示时间.

    (年,月,日,时,分,秒,周几,一年中的第几天,是否夏令时)
    (年月日,时分秒,周年几天是否夏)

    索引    名称      内容              取值范围

     0      tm_year    年               4 位数
     1      tm_month   月               1 ~ 12   
     2      tm_day     日               1 ~ 31
     3      tm_hour    时               0 ~ 23   
     4      tm_min     分               0 ~ 59   
     5      tm_sec     秒               0 ~ 61 60表示闰秒,61历史遗留值
     6      tm_wday    周几             0 ~ 6
     7      tm_yday    一年中的第几天   1 ~ 366
     8      tm_isdst   夏令时           0不夏 or 其他数是夏



三. 函 数 :

时间戳        ->        时间元祖        ->        字符串    (时间元祖是中间部分)

localtime()本地         asctime()外语                 
gmtime()utc             strftime()

字符串        ->        时间元祖        ->        时间戳

                        mktime()本地                        
                        timegm()utc


时间戳 直接 转 字符串 : ctime()


直接获取 当前的 一个时间戳 :

<1> time()

        time.time()

            return 时间戳

再通过 时间戳 转 本地元祖 或 utc元祖.


时间戳 转 元祖:

<1> localtime()
    时间戳 转为 本地时间元祖.
    获取 指定 时间戳 的 本地时间元祖格式.

        参数默认是 当前时间的 时间戳.

        time.localtime(时间戳)
            
            return 本地时间元祖格式 : time.struct_time(tm_year...)

    指定时间戳 :

        time.localtime(0)
            
            return time.struct_time(1970...tm_hour=8,tm_sec=0)

            因按照时区获取,tm_hour=8,因本地是在东8区,离格林威治时间差8个小时.

        
<2> gmtime()
    时间戳 转为 ufc时间元祖.
    获取 指定 时间戳 的 utc时间 元祖格式.

        参数默认是 当前时间的 时间戳.

        time.localtime(时间戳)

            return utc时间 元祖格式 : time.struct_time(tm_year...)

    指定时间戳 :

        time.localtime(0)

            return time.struct_time(1970...tm_hour=0,tm_sec=0)



时间元祖 转 本地时间戳 :

<1> mktime()
    根据指定 时间元祖 转 本地时间戳 :

    注 意 : 获得的时间戳 类型 只能是 本地时间戳.

        time.mktime(timetuple)

            return 时间戳


时间元祖 转 utc时间戳 :

<1> timegm() 
    根据 时间元祖 转 utc时间戳 :
    
    import calendar

    calendar.timegm(timetuple)
        
        return utc时间戳
    

时间元祖 转 字符串 :

<1> asctime()
    参数时间元祖 转为 字符串.

        timetuple = (1996,1,2,18,15,20,0,0,0)

        time.asctime(timetuple)

            return 'Mon Jan 2 18:15:20 1996'


时间戳 转 字符串 :

<1> ctime()
    时间戳 转 本地时间的字符串格式.

        参数默认是 当前时间的 时间戳.

        time.ctime()

            return 'Sat Feb 22 00:04:58 2020'

    指定时间戳 :
        
        time.ctime(0)

            return 本地时间 'Thu Jan 1 08:00:00 1970'





四. 格 式 化 输 出 时 间 字 符 串 :


年    %Y    时    %H    AM/PM    %p       

月    %m    分    %M

日    %d    秒    %S


更多查看 help(time) 


格 式 化 成 字 符 串 :

<1> strftime()
    格式化 输出时间字符串.
        
        time.strftime('时间字符串的格式',指定时间元祖)

            return 自定义的时间字符串.

    示 例 : '%Y/%m/%d %p %H:%M:%S' 


展示给中国用户当前时间的 字符串格式 的步骤 :

time.strftime('%Y年%m月%d日 %H:%M:%S',time.localtime(time.time()))

注 意 : 在格式化时,写汉字只在Linux下支持,windows下日期格式化不支持.

            so : 不要用汉字,用了只有linux能看见.


提 取 格 式 化 中 的 时 间 :

<2> strptime()
    根据时间格式 从已经格式化的字符串中,提取时间数据.

        time.strptime('已格式化的时间字符串','时间格式')

            return 时间元祖

    注 意 : (1)时间格式 必须和 已格式化的字符串 完全一样.
            (2)占位符 一个不能少.
            (3)空格 不能多不能少
            (4)间隔符号 一个不能多 一个不能少.
            (5)可用 变量代替.




五. 程 序 与 时 间 相 关 :


<1> sleep()
    程序等待.

        参 数 : 秒数,多少位小数 均可,不能为负数.

        time.sleep(正数值 的 秒数)  


<2> perf_counter()    perf counter : 性能 计数器
    cpu计时器, 用于计算 代码的执行时间.

    注 意 : 单位是 秒数.
            如果添加 sleep,3.8linux版本perf_counter()不会将sleep()时间计算在内.

                但不同版本 不同操作系统,有的perf_counter会将时间计算在内.

            脚本文件的 运行速度 要比 终端 快 3倍左右.     

        time.perf_counter()

    示 例 :

        def t():
            start = time.perf_counter()
            for i in range(100):
                print(i)
            end = time.perf_counter()
            print(end-start)
        t()

        结果为 0.002.... 秒.


<3> clock()    3.8版本 已经移除.
    获取 cpu时间,主要用于 计算 代码执行时间.

    注 意 : 单位是 秒数.
            如果添加 sleep() 则 clock() 将sleep()时间 计算在内.

        time.clock()

    示 例 :  

        def t():
            start = time.clock()
            for i in range(100):
                print(i)
            end = time.clock()
            print(end-start)
        t()

        结果为 0.002.... 秒.

<4>


<12>


<13>


<14>


<15>


<16>


<17>


<18>


<19>


<20>


<21>


<22>


<23>


