一. 包 文 件 夹 中 的 __init__ :

    作 用 : 包的标志.

            使得包具有模块的功能.


    <1> 把包 作为模块 使用:

            1. 为 __init__ 文件 添加内容

            2. import 包

            3. 包.内容 即可



二. __all__ 特 殊 变 量 :

    作 用 : 定义 导包时 通过 from ... import * 导入包中的哪些模块.

    语 法 : 在 __init__.py 文件中 修 改 列 表 中 的 元 素 , 不 加  后 缀 :

                __all__ = ['filename1','filename2']



    注 意 : 在 __init__.py文件中,如果设置了 __all__变量,并且使用 from ... import    
            语法导入包本身, __init__.py文件中,除了__all__的设置之外,其余设置均

            会失效.

            必须在 from ... import * 的方式才有效(因其对应 __all__)



三. 相对导入 与 绝对导入 :

    绝 对 : (搜索路径)

        import 包

        import 模块

        import 包.子模块

        from 包 import 模块

        from 模块 import 内容

    查 找 方 式 : 绝对导入方式会使用 <搜索路径> 查找指定的包或模块.


    相 对 : 

    查 找 方 式 : 在当前文件夹中搜索查找指定的包或者模块.

    示 例  : 

        <详见python/module/my_package>

        1. a文件 导入 b文件

        2. b文件 导入 c文件
        
        3. 则 a文件 可以调用 c文件


