多 任 务 的 实 现 原 理 :

    
    通常会设计Master-Worker模式,Master负责分配任务,Worker负责执行任务

    因此,多任务模式下通常是一个Master,多个Worker

    多任务的应用场景 : 执行需要等待时间较长而不是CPU大量运算的多个任务的时候



一. 多 进 程 :

    
    主进程是Master,其他进程是Worker    

    
    多 进 程 的 优 点 : 

        <1> 稳定性,安全性高 

            一个子进程崩溃,不会影响主进程和其他子进程,当然如果主进程崩溃,所有
            
            子进程全部崩溃,但是Master进程只分则分配任务,崩溃概率低 


    多 进 程 缺 点 : 

        <1> 创建进程的代价大,用fork()调用还行,在Windows下创建进程开销巨大
        
        <2> 操作系统能同时运行的进程数是有限的,在内存和CPU的限制下,如果有

            几千个进程同时运行,操作系统连调度都会成问题



二. 多 线 程 :


    主线程是Master,其他进程是Worker


    多 线 程 的 优 点 :

        <1> 多线程模式通常比多进程快一点.

        <2> windows作为多线程操作系统设计,windows下多线程效率比多进程快


    多 线 程 的 缺 点 :

        <1> 任何一个线程都可能直接造成整个进程崩溃

            所有线程共享进程的内存,在Windows上,如果一个线程执行的代码出了问题,

            经常可以看到提示:'该程序执行了非法操作,即将关闭',其实是某个线程出

            了问题,但是操作系统会强制结束整个进程



三. 计算密集型和IO密集型 :


      计算密集型大量使用CPU进行运算,需要控制进程线程数量,以达到让CPU将全部功效

    用在计算数据上


      IO密集型包括发送网络请求,磁盘读写等任务,不需要CPU做大量计算,任务的等待时间

    时间较长,而调用的CPU资源较少.因此为了不让时间花费在等待上,用多任务模式,多进

    程多线程,让不同的核去不同的任务,解决问题的时间是单进程的任务数量分之一
