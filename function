一. 函 数 概 览 : 

    函 数 的 三 个 部 分 :

        功 能 : 做什么事的 . 

        参 数 : 传入的值和类型.

        返 回 值 : 得到什么结果.


    函 数 分 为 两 种 :

        <1> 执行过程的函数 : 无返回值.
        
        <2> 返回结果的函数 : 有返回值.


    概 念 : 函数在声明之后,会在内存上 产生一个地址.(有id,但不占空间.)

            函数不调用,不会占用内存空间.


    global 和 nonlocal

        <1> global 变量后, 可以在一层函数中 改变全局变量的值.

        <2> nonlocal 变量后,可以在 嵌套的 内层函数中 改变 外层函数的变量的值.


一.参 数 :

    形 参(parameters) : 普通参数  和 收集普通参数 
    
                        关键字参数 和 收集关键字参数

    实 参(arguments)  : 普通实参 和 关键字参数


    普 通 参 数 : 按顺序传入即可.

        1.收集 普通参数 :

        <1> 没有 其他 形参, 则 接收 所有 实参 :

            def func(*num):
                
                print(num)

            func(1,2,3)

            *num 表示 可以接收 所有 传入的 普通参数.

        <2> 收集 普通形参 混合版 :

在函数 形参中, 只有 收集普通参数 还有 其他的普通 形参 : (无关键字参数时)

收集普通参数 , 接收 按顺序传入的参数外的 其他参数. 关键字参数 则报错.

            def func(a,b,*c):
                
                pass

            func(1,2,3,4,5)

        传入的参数为:func(1,2,(3,4,5)),收集 参数c 收集了 其余的 参数.


    2.关 键 字 参 数 :

        !!!  注意:关键字参数 传参 用 = . 而且 不加 ''

        def func(a,b,c)
        
            print(a,b,c)

        func(a = 1,b = 2,c = 3)

        传参时 指定 传入 参数的 名称.

        <1>收 集 关键字 形参 : 形参 带 ** :

            收集来 的参数:age=22 会传入 收集关键字参数,格式 为字典.

        使用 必备 条件 :
        
        实参中 必须 都是 关键字 参数, **形参 收集 实参没有对应 的形参名 的 参数.
        
        普通 参数 , 和 没形参 要的 普通参数 均 不能接收.

            def func(a,b,**c):
                
                pass

            func(1,2,3,x=4)

        上面有 收集 普通实参的, ** 则收集 关键字 参数.


    3.参数 混合 问题 :

        形参 摆放 :
        
        (1)实参 : 普通参数 在前,关键字参数 在后
        
        (2)形参 : 
        
            推荐顺序 : 普通参数->收集普通参数->关键字参数->关键字收集参数  
            
            收集参数 在 普通参数 之后使用
            
            关键字收集参数 一定在最后出现

        <1> 收集 普通参数 :
        
            (1)如果 在 普通参数前,会 将普通参数 都收集.
            
            (2)所以 应该 位列在 普通参数之后,用来收集 其他 普通参数.


二. return 

    作 用 :

        1.结束 函数.

        2.返回值 

            <1>只写 return 返回所有值.


三. 函数 文档 :

    函数文档 的 三个部分 :

        功 能 : 是做什么事的 .

        参 数 : 传入的 值 和 类型.

        返 回 值 : 得到什么 结果.


        <1> 标准 格式 :

            def getsum(par_01,par_02)
                
            '''
            功能 : 计算两个数值的和 
            
            参数_01 : Number类型
            
            参数_02 : Number类型
            
            返回值 : 两个数值的和
            
            '''
            
            result = par_01+par_02
                
                return result
    
    注 意 : 三引号 <1> 必须在 def 下面的一行.
    
                   <2> 缩进 4 格.
