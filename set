集 合 特 点 :


    (1)集合里的元素 是不能被修改的数据.

    (2)无序 

    (3)不重复

    (4)集合 不能 + 集合

    交 集 : 两个集合中 都有的 部分.

    并 集 : 两个集合 合并到一起 去除掉重复的部分.

    差 集 : 集合1 相对于 集合2 的差集 : 集合1有 集合2 没有的部分.

    超 集 : 集合1 包含了 集合2 : 则 集合1 是集合2 的超集.
    
    子 集 :                         集合2 是集合1 的子集.
    
    补 集 :                         未包含的部分 是集合1 的补集.    


    常 规 集 合 间 操 作 :

        <1> union() 并

            set1.unioin(set2)

        <2> intersection() 交

            set1.intersection(set2)

        <3> difference() 差

            set1.difference(set2)

        <4> issubset() 子集

            子.issubset(父)



一. 创 建 集 合 :

    <1> var = set()
    
        创建一个空集合.

    <2> var = {1,2,3,4}
     
        由给定的元素 创建集合.

    <3> var = set(容器数据)
     
       列表,元祖,集合,字典(参数为字典时,默认是字典的 key)
        
        创建 字典值 的集合,用 dict.values()

    <4> 集 合 元 素 特 点:

        (1)集合里的数据 是不能被修改的数据.
        
        (2)列表 不可以,列表可修改,
        
        (3)元祖 可以. 但元祖内再嵌套列表,不可以.
        
        (4)字典 不可以,字典值可以修改. 
        
        (5)集合 不可以,集合可以修改.
        
        (6)集合内有1时,再写True不会显示,True就是1.

        集合可存放的数据 : 数字类型,字符串类型,元祖类型,冰冻集合类型.

        集合没有 数据容器类的 基本操作 : 
    
        比如 赋值,索引等.



二. 增 

    集 合 特 有

    单 个 增 :
    
    <1> add()
    
        set.add()
    
        (1)参数只能有一个.
    
        (2)参数只能为 数字 字符 元祖 冰冻集合类型

    多 个 增 :
    
    <2> update()
    
        集合.update(容器数据)
    
        (1)增加方式:从迭代器中 逐个增加.
    
        (2)可接收很多参数.
    
        (3)参数必须是迭代器.(字符串,列表,元祖,集合,数字要放在迭代器里)



三. 删

    
    <1> set.remove(键)
    
        删除 指定的 1个 元素

    <2> set.pop()
        
        随机删除 一个元素


四. 改

    <1>无改



五. 查 

    <1>无查



六. 序 列 操 作 : 

    <1> in and not in 

    <2> len()

    <3> max()
    
        集合中还有元祖时,max() or min() 则报错.

    <4> min()
    
        集合中还有元祖时,max() or min() 则报错.

    <5> set()



七. 集 合 遍 历 :

    <1> for...in...:

    <2>嵌套集合遍历 : 
    
        集合 = {(1,2),(3,4),(5,6)}
        
        for i,k in 集合 :
        
        return 无序的


八. 集 合 推 导 式 :


    <1> 普通 推导式 :
    
        var = {var1 for var1 in container}
        
        会把 容器数据 的每个元素,作为 集合的 元素.
        
        所以 容器数据里的元素 不能为 不可进入集合 的类型.
        
            return 去除重复元素 的 结果

        {x for x in range(10)}


    <2> 带判断条件 集合 推导式 :
    
        var = {var1 for var1 in container if...}
            
            return 去除重复元素 的 结果

        {x*x for x in range(10) if x != 5}
    

    <3> 多循环 集合 推导式 :
    
        var = {var1,var2的操作 for var1 in 容器1 for var2 in 容器2 }
    
            return 去除重复元素 的 结果
    
        比如 var1 + var2 每每元素相加一般会有重复 的结果,去掉.

        {var1+var2 for var1 in range(1,10) for var2 in range(11,20)}



九. 集 合 函 数 :


    <1> copy()

    <2> 无 count()
    
        只有 有序容器 有.

    <3> remove()
     
        result = 集合.remove(键)
     
            return None
     
        注意:直接操作原有集合.

    <4>pop()
    
        result = 集合.pop()
    
        随机删一个
    
        注意:直接操作原有集合.

    <5>clear()
        
        集合.clear()
        
        清空集合,返回值 None



十. 集 合 专 用 函 数 :


    <1>add() 删除键
    
        集合.add(参数)

        (1)参数只能有一个.
  
        (2)参数只能为 数字 字符 元祖 冰冻集合类型

    <2>discard() 删除键
    
        集合.discard(键)
        
        返回值 None

        (1)remove()删除没有的值 会报错.
        
        (2)discard()删除没有的值 不报错.
        
        (3)直接操作原有集合.



并 集 :

    <1> 并 集 : union()
    
        set1.union(set2)
        
        return 并集
    
    <2> 并 集 更 新 : update()
    
        集合1.update(set2)
        
        return None
        
        计算 并集之后 将结果 重新赋值给 第一个集合的变量.



差 集 :

    <1> 差 集 : difference()
    
        result = 集合1.difference(集合2)
        
        return 集合1有的 且 集合2没有的.

    
    <2> 差 集 更 新 : difference_update()
    
        集合1.difference_update(集合2)
    
            return None
    
        计算 差集之后 将结果 重新赋值给 第一个集合的变量.
        
        修改原集合



对称 差集 : 

    <1> symmetric_difference()
    
        集合1.symmetric_difference(集合2)

        集合1 和 集合2 分别 特有的 元素,返回值为 一个集合.
        
        return 对称差集

    <2> 对称差集 更新 : symmetric_difference_update()
    
        集合1.symmetric_difference_update(集合2)
            
            return None

        计算 集合1 和 集合2 分别 特有的 元素,赋值给 第一个集合.



交 集 :

    <1> 交 集 : intersection()
    
        集合1.intersection(集合2) 
            
            return 交集

    <2> 交 集 更 新 : intersection_update()
    
        集合1.intersectioin_update(集合2)
        
        return None
        
        计算 交集之后 将结果 重新赋值给 第一个集合的变量.

    <3> 检 测 是 否 不 相 交 : isdisjoint()
    
        集合1.isdisjoint(集合2)
        
        不相交 : True
        
        相交   : False



超集 子集 :

    <1> 检 测 是 否 是 超 集 : issuperset()
        
        集合1.issuperset(集合2)
        
        检测 集合1 是否是 集合2 的超集
        
        返回 True or False
        
            (1)参数唯一


    <2> 检 测 是 否 是 子 集 : issubset()
    
        集合1.issubset(集合2)
        
        检测 集合1 是否是 集合2 的子集
        
        返回 True or False
        
        (1)参数唯一



十一. 冰 冻 集 合 / 固 定 集 合 :

    (1)一种数据类型
    (2)type() : class 'frozenset' 是已存在的类型.
    (3)一旦创建 就不能 修改 .
    (4)除了不可修改,其他和集合 完全一样!
    (5)不能 clear(), 可 copy()



创 建 :

    <1> var = frozenset(container)

        return ({ele1,ele2})

        仅此一种

    <2> 错误 创建方式 : 
    
        var = ({})
        
        此种创建 return {元素1,元素2},并非冰冻集合,还可以修改.


作 用 :

    <1> 为集合的操作 提供一个 不可以改变的 对照集合.


注 意 : 
    
    <1> 冰冻集合 作为主体的 显像结果 : 

        冰冻集合 作为主体的操作,结果 依然是 冰冻集合.
    
    <2> 普通集合 作为主体的 显像结果 :

        普通集合 作为主体的操作,结果 依然是 普通集合.

    <3> 普通集合 作为主体的 修改操作 : update()
        
        可以修改 原普通集合.

    <4> 冰冻集合 作为主体的 修改操作 : updata()
        
        不可以.

